"use strict";
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var m = __importStar(require("./index"));
var child_process_1 = __importDefault(require("child_process"));
var tempy_1 = __importDefault(require("tempy"));
var fs_1 = require("fs");
var getPackageSpy;
var deprecateSpy;
var execSyncSpy;
var setNpmrcSpy;
beforeEach(function () {
    getPackageSpy = jest
        .spyOn(m, "getPackage")
        .mockResolvedValue({ name: "test-package" });
    deprecateSpy = jest.spyOn(m, "deprecate").mockReturnValue(undefined);
    execSyncSpy = jest
        .spyOn(child_process_1["default"], "execSync")
        .mockReturnValue(undefined);
    setNpmrcSpy = jest.spyOn(m, "setNpmrc").mockResolvedValue(undefined);
});
var context = {
    logger: { log: jest.fn(), error: jest.fn() },
    env: { NPM_TOKEN: "test-token" },
    nextRelease: { version: "1.2.3" },
    // @ts-ignore incorrect typings
    cwd: tempy_1["default"].directory()
};
test("should expose publish", function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        expect(m.publish).toBeDefined();
        return [2 /*return*/];
    });
}); });
test("should return if no deprecations", function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, expect(m.publish({ deprecations: [] }, context)).resolves.toBeUndefined()];
            case 1:
                _a.sent();
                expect(getPackageSpy).toHaveBeenCalledTimes(1);
                expect(deprecateSpy).not.toHaveBeenCalled();
                return [2 /*return*/];
        }
    });
}); });
test("should return if no config", function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, expect(m.publish({}, context)).resolves.toBeUndefined()];
            case 1:
                _a.sent();
                expect(getPackageSpy).toHaveBeenCalledTimes(1);
                expect(deprecateSpy).not.toHaveBeenCalled();
                return [2 /*return*/];
        }
    });
}); });
test("should get deprecations from package.json", function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                getPackageSpy.mockResolvedValue({
                    name: "foo",
                    deprecations: [{ version: "<1", message: "foo" }]
                });
                return [4 /*yield*/, expect(m.publish({}, context)).resolves.toBeUndefined()];
            case 1:
                _a.sent();
                expect(getPackageSpy).toHaveBeenCalledTimes(1);
                expect(deprecateSpy).toHaveBeenCalledTimes(1);
                return [2 /*return*/];
        }
    });
}); });
test("should call deprecate", function () { return __awaiter(void 0, void 0, void 0, function () {
    var deprecations, _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                deprecations = [{ version: "<1", message: "Please use version > 1." }];
                return [4 /*yield*/, expect(m.publish({ deprecations: deprecations }, context)).resolves.toBeUndefined()];
            case 1:
                _d.sent();
                expect(getPackageSpy).toHaveBeenCalledTimes(1);
                _b = (_a = expect(deprecateSpy)).toHaveBeenCalledWith;
                _c = [deprecations[0]];
                return [4 /*yield*/, m.getPackage(context)];
            case 2:
                _b.apply(_a, _c.concat([(_d.sent()).name,
                    expect.stringMatching(/\.npmrc$/),
                    expect.anything(),
                    context]));
                return [2 /*return*/];
        }
    });
}); });
test("should call deprecate with rendered templates", function () { return __awaiter(void 0, void 0, void 0, function () {
    var deprecations, _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                deprecations = [
                    {
                        version: "< ${nextRelease.version}",
                        message: "Please use ${nextRelease.version}."
                    },
                ];
                return [4 /*yield*/, expect(m.publish({ deprecations: deprecations }, context)).resolves.toBeUndefined()];
            case 1:
                _d.sent();
                expect(getPackageSpy).toHaveBeenCalledTimes(1);
                _b = (_a = expect(deprecateSpy)).toHaveBeenCalledWith;
                _c = [{ version: "< 1.2.3", message: "Please use 1.2.3." }];
                return [4 /*yield*/, m.getPackage(context)];
            case 2:
                _b.apply(_a, _c.concat([(_d.sent()).name,
                    expect.stringMatching(/\.npmrc$/),
                    expect.anything(),
                    context]));
                return [2 /*return*/];
        }
    });
}); });
test("should call deprecate with more complex templates", function () { return __awaiter(void 0, void 0, void 0, function () {
    var deprecations, _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                deprecations = [
                    {
                        version: "< ${nextRelease.version.split('.')[0]}",
                        message: "Please use ^${nextRelease.version.split('.')[0]}.0.0."
                    },
                ];
                return [4 /*yield*/, expect(m.publish({ deprecations: deprecations }, context)).resolves.toBeUndefined()];
            case 1:
                _d.sent();
                expect(getPackageSpy).toHaveBeenCalledTimes(1);
                _b = (_a = expect(deprecateSpy)).toHaveBeenCalledWith;
                _c = [{ version: "< 1", message: "Please use ^1.0.0." }];
                return [4 /*yield*/, m.getPackage(context)];
            case 2:
                _b.apply(_a, _c.concat([(_d.sent()).name,
                    expect.stringMatching(/\.npmrc$/),
                    expect.anything(),
                    context]));
                return [2 /*return*/];
        }
    });
}); });
test("should call execSync correctly", function () { return __awaiter(void 0, void 0, void 0, function () {
    var deprecation, name;
    return __generator(this, function (_a) {
        deprecateSpy.mockRestore();
        deprecation = {
            version: "< 1",
            message: "Please use ^1."
        };
        name = "test-package";
        m.deprecate(deprecation, name, ".npmrc", "https://registry.npmjs.org/", context);
        expect(execSyncSpy.mock.calls[0]).toMatchInlineSnapshot("\n    Array [\n      \"npm deprecate --userconfig .npmrc --registry https://registry.npmjs.org/ test-package@\\\"< 1\\\" \\\"Please use ^1.\\\"\",\n      Object {\n        \"stdio\": \"inherit\",\n      },\n    ]\n  ");
        expect(context.logger.log).toBeCalledWith('Completed call to: npm deprecate --userconfig .npmrc --registry https://registry.npmjs.org/ test-package@"< 1" "Please use ^1."');
        return [2 /*return*/];
    });
}); });
test("should set npmrc", function () { return __awaiter(void 0, void 0, void 0, function () {
    var consoleLogSpy, npmrc;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                setNpmrcSpy.mockRestore();
                consoleLogSpy = jest.spyOn(console, "log").mockReturnValue(undefined);
                npmrc = tempy_1["default"].file();
                return [4 /*yield*/, m.setNpmrc(npmrc, "https://example.com", context)];
            case 1:
                _a.sent();
                consoleLogSpy.mockRestore();
                expect((0, fs_1.readFileSync)(npmrc).toString()).toContain("//example.com/:_authToken = ${NPM_TOKEN}");
                return [2 /*return*/];
        }
    });
}); });
